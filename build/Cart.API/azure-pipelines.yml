# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/services/Cart/*
      - build/Cart.API/azure-pipelines.yml
      - deploy/Azure/Cart.API/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'src/services/Cart/Cart.API/Cart.API.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
   
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Azure Connection'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: 'az acr build --image cartapi --registry WHeComm --file $(Build.SourcesDirectory)/src/services/Cart/Cart.API/DOCKERFILE .'
      workingDirectory: '$(Build.SourcesDirectory)/src/'



# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     projects: '$(solution)'
#     feedsToUse: 'select'


# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '$(solution)'


# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     projects: '**/Product.API.csproj'
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.DefaultWorkingDirectory)/Output/API'


# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     projects: '$(function)'
#     feedsToUse: 'select'


# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '$(function)'


# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     projects: '**/Product.Function.csproj'
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.DefaultWorkingDirectory)/Output/Function'



# - task: AzurePowerShell@5
#   inputs:
#     azureSubscription: 'Azure Connection'
#     ScriptType: 'InlineScript'
#     Inline: |
#       write-host (whoami)
#       $ResourceGroup = 'eCommAzure'
#       $saKey = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroup -Name $(storageEndpoint))[0].Value
#       $SAConnectionString = "DefaultEndpointsProtocol=https;AccountName=$(storageEndpoint);AccountKey=$saKey;EndpointSuffix=core.windows.net"
      
#       $secretvalue = ConvertTo-SecureString $SAConnectionString -AsPlainText -Force
#       $secret = Set-AzKeyVaultSecret -VaultName $(keyVault) -Name StorageAccountConnectionString -SecretValue $secretvalue

#       Set-AzWebApp -ResourceGroupName eCommAzure -Name productapicazwkhd2krat2 -AssignIdentity $true

#       Set-AzWebApp -ResourceGroupName eCommAzure -Name productfncazwkhd2krat2 -AssignIdentity $true

#       #$sp = Get-AzADServicePrincipal -DisplayName $(webSiteName)
#       #Set-AzKeyVaultAccessPolicy -ObjectId $sp.Id -VaultName $(keyVault) -PermissionsToSecrets list,get

#     azurePowerShellVersion: 'LatestVersion'
#     pwsh: true


# - task: AzureWebApp@1
#   inputs:
#     azureSubscription: 'Azure Connection'
#     appType: 'webApp'
#     appName: $(webSiteName)
#     package: '$(Build.DefaultWorkingDirectory)/Output/API/*.zip'
#     deploymentMethod: 'auto'


# - task: AzureFunctionApp@1
#   inputs:
#     azureSubscription: 'Azure Connection'
#     appType: 'functionAppLinux'
#     appName: 'productfncazwkhd2krat2'
#     package: '$(Build.DefaultWorkingDirectory)/Output/function/*.zip'
#     runtimeStack: 'DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0'